#+TITLE: Channel-n
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

Channel-n is a ~guix~ channel configuration for some packages not available on guix or nongnu.

* Wine
:PROPERTIES:
:CREATED:  [2021-10-28 Thu 09:03]
:ID:       ce4b3ad0-c11f-43bc-99ec-afb2e6107798
:END:
#+begin_src scheme :tangle channel-n/packages/wine.scm
;;; GNU Guix --- Functional package management for GNU
;;; Copyright © 2014, 2015 Sou Bunnbu <iyzsong@gmail.com>
;;; Copyright © 2016 Ricardo Wurmus <rekado@elephly.net>
;;; Copyright © 2016, 2017, 2018 Efraim Flashner <efraim@flashner.co.il>
;;; Copyright © 2017, 2018, 2019 Rutger Helling <rhelling@mykolab.com>
;;; Copyright © 2017, 2020 Nicolas Goaziou <mail@nicolasgoaziou.fr>
;;; Copyright © 2018, 2019, 2020 Tobias Geerinckx-Rice <me@tobias.gr>
;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
;;;
;;; This file is part of GNU Guix.
;;;
;;; GNU Guix is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Guix is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Guix.  If not, see <http://www.gnu.org/licenses/>.

(define-module (gnu packages wine)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix git-download)
  #:use-module (guix utils)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system meson)
  #:use-module (guix build-system trivial)
  #:use-module (gnu packages)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages autotools)
  #:use-module (gnu packages base)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages bison)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages databases)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages flex)
  #:use-module (gnu packages image)
  #:use-module (gnu packages gcc)
  #:use-module (gnu packages gettext)
  #:use-module (gnu packages ghostscript)
  #:use-module (gnu packages gl)
  #:use-module (gnu packages glib)
  #:use-module (gnu packages gstreamer)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages kerberos)
  #:use-module (gnu packages libusb)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mingw)
  #:use-module (gnu packages openldap)
  #:use-module (gnu packages perl)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages python)
  #:use-module (gnu packages mp3)
  #:use-module (gnu packages photo)
  #:use-module (gnu packages samba)
  #:use-module (gnu packages scanner)
  #:use-module (gnu packages sdl)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages video)
  #:use-module (gnu packages vulkan)
  #:use-module (gnu packages xml)
  #:use-module (gnu packages xorg)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1))

(define-public wine
  (package
    (name "wine-5.2")
    (version "5.2")
    (source
     (origin
       (method url-fetch)
       (uri (let ((dir (string-append
                        (version-major version)
                        (if (string-suffix? ".0" (version-major+minor version))
                            ".0/"
                            ".x/"))))
              (string-append "https://dl.winehq.org/wine/source/" dir
                             "wine-" version ".tar.xz")))
       (sha256
        (base32 "02yr0l5xl76iz9shn1xmlx05ab61kp4yviddp079vi27whbpi10r"))))
    (build-system gnu-build-system)
    (native-inputs
     `(("bison" ,bison)
       ("flex" ,flex)
       ("gettext" ,gettext-minimal)
       ("perl" ,perl)
       ("pkg-config" ,pkg-config)))
    (inputs
     `(("alsa-lib" ,alsa-lib)
       ("dbus" ,dbus)
       ("cups" ,cups)
       ("eudev" ,eudev)
       ("faudio" ,faudio)
       ("fontconfig" ,fontconfig)
       ("freetype" ,freetype)
       ("gnutls" ,gnutls)
       ("gst-plugins-base" ,gst-plugins-base)
       ("lcms" ,lcms)
       ("libxml2" ,libxml2)
       ("libxslt" ,libxslt)
       ("libgphoto2" ,libgphoto2)
       ("libmpg123" ,mpg123)
       ("libldap" ,openldap)
       ("libnetapi" ,samba)
       ("libsane" ,sane-backends)
       ("libpcap" ,libpcap)
       ("libpng" ,libpng)
       ("libjpeg" ,libjpeg-turbo)
       ("libusb" ,libusb)
       ("libtiff" ,libtiff)
       ("libICE" ,libice)
       ("libX11" ,libx11)
       ("libXi" ,libxi)
       ("libXext" ,libxext)
       ("libXcursor" ,libxcursor)
       ("libXrender" ,libxrender)
       ("libXrandr" ,libxrandr)
       ("libXinerama" ,libxinerama)
       ("libXxf86vm" ,libxxf86vm)
       ("libXcomposite" ,libxcomposite)
       ("mit-krb5" ,mit-krb5)
       ("openal" ,openal)
       ("pulseaudio" ,pulseaudio)
       ("sdl2" ,sdl2)
       ("unixodbc" ,unixodbc)
       ("v4l-utils" ,v4l-utils)
       ("vkd3d" ,vkd3d)
       ("vulkan-loader" ,vulkan-loader)))
    (arguments
     `(;; Force a 32-bit build targeting a similar architecture, i.e.:
       ;; armhf for armhf/aarch64, i686 for i686/x86_64.
       #:system ,@(match (%current-system)
                    ((or "armhf-linux" "aarch64-linux")
                     `("armhf-linux"))
                    (_
                     `("i686-linux")))

       ;; XXX: There's a test suite, but it's unclear whether it's supposed to
       ;; pass.
       #:tests? #f

       #:configure-flags
       (list (string-append "LDFLAGS=-Wl,-rpath=" %output "/lib/wine32"))

       #:make-flags
       (list "SHELL=bash"
             (string-append "libdir=" %output "/lib/wine32"))

       #:phases
       (modify-phases %standard-phases
         ;; Explicitly set the 32-bit version of vulkan-loader when installing
         ;; to i686-linux or x86_64-linux.
         ;; TODO: Add more JSON files as they become available in Mesa.
         ,@(match (%current-system)
             ((or "i686-linux" "x86_64-linux")
              `((add-after 'install 'wrap-executable
                  (lambda* (#:key inputs outputs #:allow-other-keys)
                    (let* ((out (assoc-ref outputs "out"))
                           (icd (string-append out "/share/vulkan/icd.d")))
                      (mkdir-p icd)
                      (copy-file (string-append
                                  (assoc-ref inputs "mesa")
                                  "/share/vulkan/icd.d/radeon_icd.i686.json")
                                 (string-append icd "/radeon_icd.i686.json"))
                      (copy-file (string-append
                                  (assoc-ref inputs "mesa")
                                  "/share/vulkan/icd.d/intel_icd.i686.json")
                                 (string-append icd "/intel_icd.i686.json"))
                      (wrap-program (string-append out "/bin/wine-preloader")
                        `("VK_ICD_FILENAMES" ":" =
                          (,(string-append icd
                                           "/radeon_icd.i686.json" ":"
                                           icd "/intel_icd.i686.json"))))
                      #t)))))
             (_
              `()))
         (add-after 'configure 'patch-dlopen-paths
           ;; Hardcode dlopened sonames to absolute paths.
           (lambda _
             (let* ((library-path (search-path-as-string->list
                                   (getenv "LIBRARY_PATH")))
                    (find-so (lambda (soname)
                               (search-path library-path soname))))
               (substitute* "include/config.h"
                 (("(#define SONAME_.* )\"(.*)\"" _ defso soname)
                  (format #f "~a\"~a\"" defso (find-so soname))))
               #t)))
         (add-after 'patch-generated-file-shebangs 'patch-makefile
           (lambda* (#:key outputs #:allow-other-keys)
             (invoke "make" "Makefile") ; Makefile is first regenerated
             (substitute* "Makefile"
               (("-lntdll" id)
                (string-append id
                               " -Wl,-rpath=" (assoc-ref outputs "out")
                               "/lib/wine32/wine/$(ARCH)-unix")))
             #t)))))
    (home-page "https://www.winehq.org/")
    (synopsis "Implementation of the Windows API (32-bit only)")
    (description
     "Wine (originally an acronym for \"Wine Is Not an Emulator\") is a
compatibility layer capable of running Windows applications.  Instead of
simulating internal Windows logic like a virtual machine or emulator, Wine
translates Windows API calls into POSIX calls on-the-fly, eliminating the
performance and memory penalties of other methods and allowing you to cleanly
integrate Windows applications into your desktop.")
    ;; Any platform should be able to build wine, but based on '#:system' these
    ;; are thr ones we currently support.
    (supported-systems '("i686-linux" "x86_64-linux" "armhf-linux"))
    (license license:lgpl2.1+)))

#+end_src:
02yr0l5xl76iz9shn1xmlx05ab61kp4yviddp079vi27whbpi10r
* fcitx5-mozc
:PROPERTIES:
:CREATED:  [2021-10-28 Thu 09:03]
:ID:       b99ae0d5-644d-4968-aae0-21e943c94ab4
:END:
https://osdn.net/users/utuhiro/pf/utuhiro/files/
Particularly port the [[https://osdn.net/downloads/users/36/36879/fcitx5-mozc-ut-bazel-20211009.PKGBUILD/][fctix5-mozc-ut-bazel]] PKGBUILD.

This is a guix channel for mozc and the [[http://linuxplayers.g1.xrea.com/mozc-ut.html][UT dictionary project]]

** Bazel build
:PROPERTIES:
:CREATED:  [2021-10-30 Sat 17:30]
:ID:       c05dd9ab-2a75-429f-b4aa-44b97241c4cc
:END:
#+begin_src scheme
(define-module (gnu packages fcitx5-mozc-ut-bazel)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system trivial))

(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))

(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))
#+end_src

** Python build
:PROPERTIES:
:CREATED:  [2021-10-30 Sat 17:30]
:ID:       545cd7b3-156f-4200-935d-9ac34626768f
:END:

Another alternative is to use the python build system

Because the ~mozc~ python build doesn't use the standard ~setup.py~ which is the default in =(python-build-sysytem)=, we'll have to use file substitution with the =(substite* file)= guile function - outlined [[https://guix.gnu.org/manual/en/html_node/Build-Utilities.html#index-substitute_002a][here]].
It needs 'python-six', is that something I add in the inputs?
#+begin_src scheme :tangle channel-n/packages/fcitx-mozc-ut-gyp.scm
(define-module (gnu packages fcitx5-mozc-ut-gyp)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix utils)
  #:use-module (guix licenses)
  #:use-module (guix packages)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages ninja)
  #:use-module (gnu packages python)
  #:use-module (gnu packages python-build)
  #:use-module (gnu packages python-xyz)
  #:use-module (guix git-download)
  #:use-module (guix build-system python))

(define-public mozc
  ;; (let ((commit "d0d8a87c1ef19b7bd1d2c040e4ef38951b07fbd0")))
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/google/mozc")
                  (commit "d0d8a87c1ef19b7bd1d2c040e4ef38951b07fbd0")))
            (sha256
             (base32 "0xzjfrn0m8mc6k8vrggrf50x0ssbb9yq9c5qnval8gk8v78rpyl5"))))
   ;; (file-name (git-file-name name version))
   (build-system python-build-system)
   (arguments
    `(#:use-setuptools? #f
      #:phases
      (modify-phases %standard-phases
          (add-before 'build 'bootstrap
            (lambda _
          ;;     ;; (substitute* "setup.py" (("build_mozc.py") ""))
          ;;     ;; (invoke "python" "src/build_mozc.py" "gyp" "--gypdir=third_party")
             (with-directory-excursion "src"
              (invoke "python" "build_mozc.py" "gyp" "--gypdir=/gnu/store/x1d86yblmfx3545rwlkl84qjynw56ksd-python-gyp-0.0.0-0.5e2b3dd/bin" "--target_platform=Linux"))
              #t))
          (replace 'build
                      (lambda _
             (with-directory-excursion "src"
                        (invoke "python" "build_mozc.py" "build" "-c" "Release"
                                "server/server.gyp:mozc_server"
                                "gui/gui.gyp:mozc_tool"
                                "unix/fcitx5/fcitx5.gyp:fcitx5-mozc"))
               ;; (setenv "HOME" (getcwd))
                        #t))
          )))
  (inputs
   `(("qtbase" ,qtbase-5)))
  (propagated-inputs
   `(("python-six" ,python-six)))
  (native-inputs
   `(("python-gyp" ,python-gyp)
     ("python" ,python)
     ("ninja" ,ninja)
     ("pkg-config" ,pkg-config)))
  (synopsis "A Japanese Input Method Editor designed for multi-platform")
  (description
   "Mozc is a Japanese Input Method Editor (IME) designed for multi-platform such as Android OS, Apple OS X, Chromium OS, GNU/Linux and Microsoft Windows. This OpenSource project originates from Google Japanese Input.")
  (home-page "https://github.com/google/mozc")
  (license bsd-3)))
mozc
#+end_src


#+begin_src scheme
(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))

#+end_src
* Emacs packages
:PROPERTIES:
:CREATED:  [2021-11-17 Wed 15:42]
:ID:       89b9e756-a28b-4d03-9f11-4a83a65779a8
:END:
