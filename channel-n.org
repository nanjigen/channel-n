#+TITLE: Channel-n
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

Channel-n is a ~guix~ channel configuration for some packages not available on guix or nongnu.

* channel-n
:PROPERTIES:
:CREATED:  [2022-01-22 Sat 18:34]
:ID:       0f391280-21bd-44aa-a310-2c752d884a48
:END:
#+begin_src scheme :tangle channel-n/packages.scm
;;; GNU Guix --- Functional package management for GNU
;;;
;;; This file is NOT part of GNU Guix.
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (channel-n packages)
  #:use-module ((gnu packages) #:prefix gnu:)
  #:use-module (guix diagnostics)
  #:use-module (guix i18n)
  #:use-module (srfi srfi-1)
  #:export (search-patch
            search-patches
            %patch-path))

(define (search-patch file-name)
  "Search the patch FILE-NAME.  Raise an error if not found."
  (or (search-path (%patch-path) file-name)
      (raise (formatted-message (G_ "~a: patch not found")
                                file-name))))

(define-syntax-rule (search-patches file-name ...)
  "Return the list of absolute file names corresponding to each
FILE-NAME found in %PATCH-PATH."
  (list (search-patch file-name) ...))

(define %channel-root
  (find (lambda (path)
          (file-exists? (string-append path "/channel-n/packages.scm")))
        %load-path))

;; (define %patch-path
;;   (make-parameter
;;    (cons
;;     (string-append %channel-root "/flat/packages/patches")
;;     (gnu:%patch-path))))

#+end_src

* Wine
:PROPERTIES:
:CREATED:  [2021-10-28 Thu 09:03]
:ID:       ce4b3ad0-c11f-43bc-99ec-afb2e6107798
:END:
#+begin_src scheme :tangle channel-n/packages/wine.scm
;;; GNU Guix --- Functional package management for GNU
;;; Copyright © 2014, 2015 Sou Bunnbu <iyzsong@gmail.com>
;;; Copyright © 2016 Ricardo Wurmus <rekado@elephly.net>
;;; Copyright © 2016, 2017, 2018 Efraim Flashner <efraim@flashner.co.il>
;;; Copyright © 2017, 2018, 2019 Rutger Helling <rhelling@mykolab.com>
;;; Copyright © 2017, 2020 Nicolas Goaziou <mail@nicolasgoaziou.fr>
;;; Copyright © 2018, 2019, 2020 Tobias Geerinckx-Rice <me@tobias.gr>
;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
;;;
;;; This file is part of GNU Guix.
;;;
;;; GNU Guix is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Guix is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Guix.  If not, see <http://www.gnu.org/licenses/>.

(define-module (channel-n packages wine)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix git-download)
  #:use-module (guix utils)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system meson)
  #:use-module (guix build-system trivial)
  #:use-module (gnu packages)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages audio)
  #:use-module (gnu packages autotools)
  #:use-module (gnu packages base)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages bison)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages databases)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages flex)
  #:use-module (gnu packages image)
  #:use-module (gnu packages gcc)
  #:use-module (gnu packages gettext)
  #:use-module (gnu packages ghostscript)
  #:use-module (gnu packages gl)
  #:use-module (gnu packages glib)
  #:use-module (gnu packages gstreamer)
  #:use-module (gnu packages gtk)
  #:use-module (gnu packages kerberos)
  #:use-module (gnu packages libusb)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mingw)
  #:use-module (gnu packages openldap)
  #:use-module (gnu packages perl)
  #:use-module (gnu packages pulseaudio)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages python)
  #:use-module (gnu packages mp3)
  #:use-module (gnu packages photo)
  #:use-module (gnu packages samba)
  #:use-module (gnu packages scanner)
  #:use-module (gnu packages sdl)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages video)
  #:use-module (gnu packages vulkan)
  #:use-module (gnu packages xml)
  #:use-module (gnu packages xorg)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1))

(define-public wine
  (package
    (name "wine-5.2")
    (version "5.2")
    (source
     (origin
       (method url-fetch)
       (uri (let ((dir (string-append
                        (version-major version)
                        (if (string-suffix? ".0" (version-major+minor version))
                            ".0/"
                            ".x/"))))
              (string-append "https://dl.winehq.org/wine/source/" dir
                             "wine-" version ".tar.xz")))
       (sha256
        (base32 "02yr0l5xl76iz9shn1xmlx05ab61kp4yviddp079vi27whbpi10r"))))
    (build-system gnu-build-system)
    (native-inputs
     `(("bison" ,bison)
       ("flex" ,flex)
       ("gettext" ,gettext-minimal)
       ("perl" ,perl)
       ("pkg-config" ,pkg-config)))
    (inputs
     `(("alsa-lib" ,alsa-lib)
       ("dbus" ,dbus)
       ("cups" ,cups)
       ("eudev" ,eudev)
       ("faudio" ,faudio)
       ("fontconfig" ,fontconfig)
       ("freetype" ,freetype)
       ("gnutls" ,gnutls)
       ("gst-plugins-base" ,gst-plugins-base)
       ("lcms" ,lcms)
       ("libxml2" ,libxml2)
       ("libxslt" ,libxslt)
       ("libgphoto2" ,libgphoto2)
       ("libmpg123" ,mpg123)
       ("libldap" ,openldap)
       ("libnetapi" ,samba)
       ("libsane" ,sane-backends)
       ("libpcap" ,libpcap)
       ("libpng" ,libpng)
       ("libjpeg" ,libjpeg-turbo)
       ("libusb" ,libusb)
       ("libtiff" ,libtiff)
       ("libICE" ,libice)
       ("libX11" ,libx11)
       ("libXi" ,libxi)
       ("libXext" ,libxext)
       ("libXcursor" ,libxcursor)
       ("libXrender" ,libxrender)
       ("libXrandr" ,libxrandr)
       ("libXinerama" ,libxinerama)
       ("libXxf86vm" ,libxxf86vm)
       ("libXcomposite" ,libxcomposite)
       ("mit-krb5" ,mit-krb5)
       ("openal" ,openal)
       ("pulseaudio" ,pulseaudio)
       ("sdl2" ,sdl2)
       ("unixodbc" ,unixodbc)
       ("v4l-utils" ,v4l-utils)
       ("vkd3d" ,vkd3d)
       ("vulkan-loader" ,vulkan-loader)))
    (arguments
     `(;; Force a 32-bit build targeting a similar architecture, i.e.:
       ;; armhf for armhf/aarch64, i686 for i686/x86_64.
       #:system ,@(match (%current-system)
                    ((or "armhf-linux" "aarch64-linux")
                     `("armhf-linux"))
                    (_
                     `("i686-linux")))

       ;; XXX: There's a test suite, but it's unclear whether it's supposed to
       ;; pass.
       #:tests? #f

       #:configure-flags
       (list (string-append "LDFLAGS=-Wl,-rpath=" %output "/lib/wine32"))

       #:make-flags
       (list "SHELL=bash"
             (string-append "libdir=" %output "/lib/wine32"))

       #:phases
       (modify-phases %standard-phases
         ;; Explicitly set the 32-bit version of vulkan-loader when installing
         ;; to i686-linux or x86_64-linux.
         ;; TODO: Add more JSON files as they become available in Mesa.
         ,@(match (%current-system)
             ((or "i686-linux" "x86_64-linux")
              `((add-after 'install 'wrap-executable
                  (lambda* (#:key inputs outputs #:allow-other-keys)
                    (let* ((out (assoc-ref outputs "out"))
                           (icd (string-append out "/share/vulkan/icd.d")))
                      (mkdir-p icd)
                      (copy-file (string-append
                                  (assoc-ref inputs "mesa")
                                  "/share/vulkan/icd.d/radeon_icd.i686.json")
                                 (string-append icd "/radeon_icd.i686.json"))
                      (copy-file (string-append
                                  (assoc-ref inputs "mesa")
                                  "/share/vulkan/icd.d/intel_icd.i686.json")
                                 (string-append icd "/intel_icd.i686.json"))
                      (wrap-program (string-append out "/bin/wine-preloader")
                        `("VK_ICD_FILENAMES" ":" =
                          (,(string-append icd
                                           "/radeon_icd.i686.json" ":"
                                           icd "/intel_icd.i686.json"))))
                      #t)))))
             (_
              `()))
         (add-after 'configure 'patch-dlopen-paths
           ;; Hardcode dlopened sonames to absolute paths.
           (lambda _
             (let* ((library-path (search-path-as-string->list
                                   (getenv "LIBRARY_PATH")))
                    (find-so (lambda (soname)
                               (search-path library-path soname))))
               (substitute* "include/config.h"
                 (("(#define SONAME_.* )\"(.*)\"" _ defso soname)
                  (format #f "~a\"~a\"" defso (find-so soname))))
               #t)))
         (add-after 'patch-generated-file-shebangs 'patch-makefile
           (lambda* (#:key outputs #:allow-other-keys)
             (invoke "make" "Makefile") ; Makefile is first regenerated
             (substitute* "Makefile"
               (("-lntdll" id)
                (string-append id
                               " -Wl,-rpath=" (assoc-ref outputs "out")
                               "/lib/wine32/wine/$(ARCH)-unix")))
             #t)))))
    (home-page "https://www.winehq.org/")
    (synopsis "Implementation of the Windows API (32-bit only)")
    (description
     "Wine (originally an acronym for \"Wine Is Not an Emulator\") is a
compatibility layer capable of running Windows applications.  Instead of
simulating internal Windows logic like a virtual machine or emulator, Wine
translates Windows API calls into POSIX calls on-the-fly, eliminating the
performance and memory penalties of other methods and allowing you to cleanly
integrate Windows applications into your desktop.")
    ;; Any platform should be able to build wine, but based on '#:system' these
    ;; are thr ones we currently support.
    (supported-systems '("i686-linux" "x86_64-linux" "armhf-linux"))
    (license license:lgpl2.1+)))

#+end_src:
02yr0l5xl76iz9shn1xmlx05ab61kp4yviddp079vi27whbpi10r
* fcitx5-mozc
:PROPERTIES:
:CREATED:  [2021-10-28 Thu 09:03]
:ID:       b99ae0d5-644d-4968-aae0-21e943c94ab4
:END:
https://osdn.net/users/utuhiro/pf/utuhiro/files/
Particularly port the [[https://osdn.net/downloads/users/36/36879/fcitx5-mozc-ut-bazel-20211009.PKGBUILD/][fctix5-mozc-ut-bazel]] PKGBUILD.

This is a guix channel for mozc and the [[http://linuxplayers.g1.xrea.com/mozc-ut.html][UT dictionary project]]

** Bazel build
:PROPERTIES:
:CREATED:  [2021-10-30 Sat 17:30]
:ID:       c05dd9ab-2a75-429f-b4aa-44b97241c4cc
:END:
#+begin_src scheme
(define-module (gnu packages fcitx5-mozc-ut-bazel)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system trivial))

(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))

(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))
#+end_src

** Python build
:PROPERTIES:
:CREATED:  [2021-10-30 Sat 17:30]
:ID:       545cd7b3-156f-4200-935d-9ac34626768f
:END:

Another alternative is to use the python build system

Because the ~mozc~ python build doesn't use the standard ~setup.py~ which is the default in =(python-build-sysytem)=, we'll have to use file substitution with the =(substite* file)= guile function - outlined [[https://guix.gnu.org/manual/en/html_node/Build-Utilities.html#index-substitute_002a][here]].
It needs 'python-six', is that something I add in the inputs?
#+begin_src scheme :tangle channel-n/packages/fcitx5-mozc-ut.scm
(define-module (channel-n packages fcitx5-mozc-ut)
  ;; #:use-module (ice-9 match)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix licenses)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  ;; #:use-module (guix utils)
  #:use-module (gnu packages fcitx5)
  ;; #:use-module (gnu packages gtk)
  #:use-module (gnu packages ninja)
  ;; #:use-module (gnu packages ocr)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages protobuf)
  #:use-module (gnu packages python)
  #:use-module (gnu packages python-build)
  #:use-module (gnu packages python-xyz)
  #:use-module (gnu packages qt)
  #:use-module (channel-n packages)
  #:use-module (channel-n packages channel-n-xyz)
  #:use-module (guix git-download)
  #:use-module (guix build-system python)
  ;; #:export (python-gyp-latest)
  ;; #:use-module (srfi srfi-1)
  )

(define-public fcitx5-mozc-ut
  (package
    (name "fcitx5-mozc-ut")
    (version "2.26.4520.102")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/fcitx/mozc")
                    (commit "1485c1f60ae444f62a304b252ee384d10f06e614")))
              (sha256
               (base32 "0xzjfrn0m8mc6k8vrggrf50x0ssbb9yq9c5qnval8gk8v78rpyl5"))))
    (build-system python-build-system)
    (arguments
     `(#:use-setuptools? #f
       #:tests? #f
       #:phases
       (modify-phases %standard-phases
    ;;      ;; (add-after 'unpack 'symlink
    ;;      ;;   (lambda* (#:key inputs #:allow-other-keys)
    ;;      ;;     (let ((gyp (assoc-ref inputs "python-gyp")))
    ;;      ;;       (rmdir "src/third_party/gyp/")
    ;;      ;;       (symlink gyp "src/third_party/gyp"))))
         (replace 'configure
           (lambda* (#:key inputs ouputs #:allow-other-keys)
             (let ((gyp (assoc-ref inputs "python-gyp-latest")))
               ;; (chdir "src")
               ;; (setenv (string-append "GYP_DEFINES=" "\""
               ;;                        "document_dir=" (assoc-ref ouputs "outs") "/share/doc/mozc"
               ;;                        "use_libzinnia=1"
               ;;                        "use_libprotobuf=1"
               ;;                        "use_libabseil=1"
               ;;                        "\""))
               (invoke "python" "build_mozc.py" "gyp"
                       (string-append "--gypdir=" gyp "/bin")
                       (string-append "--server_dir="
                                      (assoc-ref ouputs "outs") "/lib/mozc")
                       "--target_platform=Linux")
               )))
    ;;      (replace 'build
    ;;        (lambda* (#:key outputs #:allow-other-keys)
    ;;          (invoke "python" "build_mozc.py" "build" "-c" "Release"
    ;;                  "server/server.gyp:mozc_server"
    ;;                  "gui/gui.gyp:mozc_tool"
    ;;                  "unix/fcitx5/fcitx5.gyp:fcitx5-mozc")))
    ;;      ;; (delete 'check)
    ;;      ;; (replace 'install
    ;;      ;;   (lambda* (#:key outputs #:allow-other-keys)
    ;;      ;;     (add-installed-pythonpath inputs outputs)
    ;;      ;;     (setenv (string-append "PREFIX=" (assoc-ref outputs "out")))
    ;;      ;;     (setenv "_bldtype=Release")
    ;;      ;;     (invoke "scripts/install_server")
    ;;      ;;     (invoke "install" "-d"
    ;;      ;;             (string-append (assoc-ref outputs "out")
    ;;      ;;                            "/share/licenses/fcitx5-mozc"))))
         )))
    (inputs
     `(("python-gyp" ,python-gyp-latest)))
    (propagated-inputs
     `(("six" ,python-six)))
    (native-inputs
     `(("python" ,python)
       ("qtbase" ,qtbase-5)
       ("ninja" ,ninja)
       ("fcitx5" ,fcitx5)
       ("pkg-config" ,pkg-config)))
    (synopsis "A Japanese Input Method Editor designed for multi-platform")
    (description
     "Mozc is a Japanese Input Method Editor (IME) designed for multi-platform
 such as Android OS, Apple OS X, Chromium OS, GNU/Linux and Microsoft Windows.
 This OpenSource project originates from Google Japanese Input.")
    (home-page "https://github.com/google/mozc")
    (license bsd-3)))
fcitx5-mozc-ut
#+end_src


#+begin_src scheme
(define-public mozc
  (package
   (name "mozc")
   (version "2.26.4520.102")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://osdn.net/users/utuhiro/pf/utuhiro/dl/mozc-"
                                version
                                ".tar.bz2"))
            (sha256
             (base32 "2a32d4a2552ae4d5bb2f2a6eb7348923a653da84bfcdccfd613a39c249eef920")))))
  (build-system ))

#+end_src

* Japanese
:PROPERTIES:
:CREATED:  [2021-12-30 Thu 10:52]
:ID:       a5e8dd1c-bb8f-42c9-998b-320ea2c0409a
:END:

#+begin_src scheme :noweb yes :tangle channel-n/packages/japanese.scm
(define-module (channel-n packages japanese)
  #:use-module (ice-9 match)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module (guix utils)
  #:use-module (guix build-system)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system qt)
  #:use-module (guix build-system python)
  #:use-module (gnu packages)
  #:use-module (gnu packages python)
  #:use-module (gnu packages python-xyz)
  #:use-module (gnu packages libreoffice)
  #:use-module (gnu packages base)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages education)
  #:use-module (gnu packages gcc)
  #:use-module (gnu packages glib)
  #:use-module (gnu packages image)
  #:use-module (gnu packages pkg-config)
  #:use-module (gnu packages qt)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages video)
  #:use-module (gnu packages xiph)
  #:use-module (gnu packages xorg)
  ;; #:use-module (channel-n packages)
  ;; #:use-module (channel-n packages japanese-xyz)
  #:use-module (srfi srfi-1))

<<goldendict>>

;; <<python-autosub>>

#+end_src

Various tools to assist with writing, reading and analyzing Japanese.

** channel-n-xyz
:PROPERTIES:
:CREATED:  [2022-01-16 Sun 13:24]
:ID:       478a4303-1881-4b3c-9122-5f974efb0d52
:END:

#+begin_src scheme :tangle channel-n/packages/channel-n-xyz.scm
(define-module (channel-n packages channel-n-xyz)
  #:use-module (ice-9 match)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix git-download)
  #:use-module (guix utils)
  #:use-module (guix build-system)
  #:use-module (guix build-system python)
  #:use-module (gnu packages)
  #:use-module (gnu packages python)
  #:use-module (gnu packages python-xyz))

(define-public python-gyp-latest
  (let ((commit "d6c5dd51dc3a60bf4ff32a5256713690a1a10376")
        (revision "0"))
    (package/inherit python-gyp
    (name "python-gyp-latest")
      ;; (inherit python-gyp)
      (version (git-version "0.0.0" revision commit))
      (source
       (origin
         ;; Google does not release tarballs,
         ;; git checkout is needed.
         (method git-fetch)
         (uri (git-reference
               (url "https://chromium.googlesource.com/external/gyp")
               (commit commit)))
      (sha256
       (base32
        "0mphj2nb5660mh4cxv51ivjykzqjrqjrwsz8hpp9sw7c8yrw4qi1")))))))

;; (define-public python2-progressbar
;;   (package
;;     (name "python2-progressbar")
;;     (version "2.5")
;;     (source
;;      (origin
;;        (method url-fetch)
;;        (uri (pypi-uri "progressbar" version))
;;        (sha256
;;         (base32
;;          "0qvckfpkdk7a35r9lc201rkwc18grb4ddbv276sj7qm2km9cp0ax"))))
;;     (build-system python-build-system)
;;     (home-page "https://github.com/niltonvolpato/python-progressbar")
;;     (synopsis "Text progress bar library for Python")
;;     (description
;;      "A text progress bar is typically used to display the progress of a long
;; running operation, providing a visual cue that processing is underway.")
;;     ;; Either or both of these licenses may be selected.
;;     (license (list license:lgpl2.1+ license:bsd-3))))

;; python2-progressbar
python-gyp-latest
#+end_src


** Goldendict
:PROPERTIES:
:CREATED:  [2021-12-30 Thu 12:01]
:ID:       fcad768e-024d-49eb-8b04-2ffc8356f801
:END:
#+begin_src scheme :noweb yes :noweb-ref goldendict
(define-public goldendict
  (let ((commit "0e888db8746766984a4422af9972de8753d4d6c4"))
    (package
     (name "goldendict")
     (version "2021-12-30")
     (source
      (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/goldendict/goldendict")
             (commit commit)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0fa1mrn8861gdlqq8a5w8wsylh56d8byj0p8zf025fa8s5n7ih7d"))))
     (build-system gnu-build-system)
     (inputs
      (list ao
            ffmpeg
            bzip2
            git
            hunspell
            libeb
            libtiff
            libvorbis
            libxtst
            libiconv
            lzo
            qtbase-5
            qtmultimedia
            qtsvg
            qtwebkit
            qtx11extras
            xz
            zlib))
     (native-inputs
      `(("pkg-config" ,pkg-config)
        ("qmake" ,qtbase-5)
        ;; ("liconv" ,libiconv)
        ;; ("glibc-utf8-locales" ,glibc-utf8-locales)
        ("qttools" ,qttools)))
     (arguments
      `(#:phases
        (modify-phases %standard-phases
                       (replace 'configure
                                (lambda* (#:key inputs outputs #:allow-other-keys)
                                  (let ((iconv (assoc-ref inputs "libiconv")))
                                    ;; qmake needs to find lrelease
                                    (invoke "qmake" "goldendict.pro"
                                            "CONFIG+=\"x86_64\""
                                            (string-append "PREFIX="
                                                           (assoc-ref outputs "out"))
                                            (string-append "LIBS+=-L" iconv "/lib")
                                            "LIBS+=-liconv"
                                            "QMAKE_LRELEASE=lrelease"))))
                       (replace 'build
                                (lambda* (#:key outputs #:allow-other-keys)
                                  (invoke "make")))
                       (replace 'install
                                (lambda* (#:key outputs #:allow-other-keys)
                                  (invoke "make" "install"))))))
     (home-page "http://www.goldendict.org/")
     (synopsis "Goldendict: a feature-rich dictionary lookup program")
     (description
      "GoldenDict is a feature-rich dictionary lookup program, supporting multiple dictionary formats (StarDict/Babylon/Lingvo/Dictd/AARD/MDict/SDict) and online dictionaries, featuring perfect article rendering with the complete markup, illustrations and other content retained, and allowing you to type in words without any accents or correct case.")
     (license license:gpl3+))))

goldendict
#+end_src

** MeCab
:PROPERTIES:
:CREATED:  [2021-12-30 Thu 08:59]
:ID:       964cce31-ce3d-4eab-acf8-5955991c9419
:END:
https://taku910.github.io/mecab/

I'd like to get a more reliable source for the ~tar~ than GDrive but also want to remain true to the author's source...
#+begin_src scheme
(define-public mecab
  (package
    (name "mecab")
    (version "0.996")
    (source
     (origin
      (method url-fetch)
      (uri "https://drive.google.com/uc?export=download&id=0B4y35FiV1wh7cENtOXlicTFaRUE")

      (sha256
       (base32 "0ncwlqxl1hdn1x4v4kr2sn1sbbcgnhdphp0lcvk74nqkhdbk4wz0"))))
    (build-system gnu-build-system)
    (home-page "https://taku910.github.io/mecab")
    (synopsis "MeCab: Yet Another Part-of-Speech and Morphological Analyzer")
    (description
     "MeCabは 京都大学情報学研究科−日本電信電話株式会社コミュニケーション科学基礎研究所 共同研究ユニットプロジェクトを通じて開発されたオープンソース 形態素解析エンジンです。")
    (license license:gpl3)))

#+end_src
** python-autosub

#+begin_src scheme :noweb yes :noweb-ref python-autosub
(define-public python-autosub
  (package
    (name "python-autosub")
    (version "0.3.12")
    (source (origin
              (method url-fetch)
              (uri (pypi-uri "autosub" version))
              (sha256
               (base32
                "01v0rkn8i2p8aqqnrrdhs8531zradydbgxd8mpdpdyjfgiybj6hj"))))
    (build-system python-build-system)
    (arguments
    `(#:tests? #f                             ;no "test" target
      #:python ,python-2))                    ;not compatible with Python 3
    (native-inputs
     `(("python2-progressbar" ,python2-progressbar)))
    ;; (native-inputs (list ffmpeg))
    (home-page "https://github.com/agermanidis/autosub")
    (synopsis "Auto-generated subtitles for any video")
    (description
     "Autosub is a utility for automatic speech recognition and subtitle generation. It takes a video or an audio file as input, performs voice activity detection to find speech regions, makes parallel requests to Google Web Speech API to generate transcriptions for those regions, (optionally) translates them to a different language, and finally saves the resulting subtitles to disk. It supports a variety of input and output languages (to see which, run the utility with the argument --list-languages) and can currently produce subtitles in either the SRT format or simple JSON.")
    (license license:x11)))

python-autosub
#+end_src
* Emacs packages
:PROPERTIES:
:CREATED:  [2021-11-17 Wed 15:42]
:ID:       89b9e756-a28b-4d03-9f11-4a83a65779a8
:END:

#+begin_src scheme :noweb yes :tangle channel-n/packages/emacs-lookup2.scm
(define-module (channel-n packages emacs-lookup2)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix gexp)
  #:use-module (guix git-download)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system emacs)
  #:use-module (gnu packages)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages texinfo)
  #:use-module (gnu packages autotools)
  #:use-module (gnu packages emacs-xyz)
  #:use-module (guix utils)
  #:use-module (srfi srfi-1)
  #:use-module (ice-9 match))

<<lookup2 definition>>
#+end_src

** lookup2
:PROPERTIES:
:CREATED:  [2021-11-17 Wed 15:42]
:ID:       de4bb81e-ad65-406e-9c9d-6107ab044fda
:END:

#+begin_src scheme :noweb yes :noweb-ref lookup2 definition
(define-public emacs-lookup2
  ;; From July 25, 2020
  ;; No releases available
  (let ((commit "06f827d92d59cf679e7340247d9eeaa23ec0ffe5")
        (revision "0"))
    (package
     (name "emacs-lookup2")
     (version (git-version "1.99.0" revision commit))
     (source
      (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/lookup2/lookup2")
             (commit commit)))
       (file-name (git-file-name name version))
       (sha256
        (base32 "19xbpsdvapvffpnmhdkxa74159dfc2r2d1s0nyb9b3armqzkahpj"))))
     (build-system gnu-build-system)
     (native-inputs `(("makeinfo" ,texinfo)
                      ("automake" ,automake)
                      ("autoconf" ,autoconf)
                      ("emacs" ,emacs)))
     (arguments
      (list
       #:modules '((guix build gnu-build-system)
                   ((guix build emacs-build-system) #:prefix emacs:)
                   (guix build utils)
                   (guix build emacs-utils))
       #:imported-modules `(,@%gnu-build-system-modules
                            (guix build emacs-build-system)
                            (guix build emacs-utils))
       #:configure-flags
       #~(list "--with-emacs=emacs"
               (string-append "--with-lispdir=" (emacs:elpa-directory #$output))
               (string-append "--infodir="
                              #$output "/share/info"))
       #:tests? #f                       ; no check target
       #:phases
       #~(modify-phases %standard-phases
                        ;; (delete 'unpack)
                        (add-after 'unpack 'autoreconf
                                   (lambda _
                                     (invoke "autoreconf" "-i"))))
       ;;                (add-after 'build 'build-lookup
       ;;                           (lambda* (#:key outputs #:allow-other-keys)
       ;;                             (invoke "make" "install"))))
       ))
     (home-page "https://github.com/lookup2/lookup2")
     (synopsis "Lookup2 package for emacs")
     (description
      "Lookup is an integrated user interface for various dictionaries. You can search various on-line and off-line dictionaries simultaneously with lookup.")
     (license license:gpl2+))))

emacs-lookup2
#+end_src
